/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/compute/v1/compute.proto

package com.google.cloud.compute.v1;

public interface FirewallPolicyRuleMatcherOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.compute.v1.FirewallPolicyRuleMatcher)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 5000.
   * </pre>
   *
   * <code>repeated string dest_ip_ranges = 337357713;</code>
   *
   * @return A list containing the destIpRanges.
   */
  java.util.List<java.lang.String> getDestIpRangesList();
  /**
   *
   *
   * <pre>
   * CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 5000.
   * </pre>
   *
   * <code>repeated string dest_ip_ranges = 337357713;</code>
   *
   * @return The count of destIpRanges.
   */
  int getDestIpRangesCount();
  /**
   *
   *
   * <pre>
   * CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 5000.
   * </pre>
   *
   * <code>repeated string dest_ip_ranges = 337357713;</code>
   *
   * @param index The index of the element to return.
   * @return The destIpRanges at the given index.
   */
  java.lang.String getDestIpRanges(int index);
  /**
   *
   *
   * <pre>
   * CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 5000.
   * </pre>
   *
   * <code>repeated string dest_ip_ranges = 337357713;</code>
   *
   * @param index The index of the value to return.
   * @return The bytes of the destIpRanges at the given index.
   */
  com.google.protobuf.ByteString getDestIpRangesBytes(int index);

  /**
   *
   *
   * <pre>
   * Pairs of IP protocols and ports that the rule should match.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.compute.v1.FirewallPolicyRuleMatcherLayer4Config layer4_configs = 373534261;
   * </code>
   */
  java.util.List<com.google.cloud.compute.v1.FirewallPolicyRuleMatcherLayer4Config>
      getLayer4ConfigsList();
  /**
   *
   *
   * <pre>
   * Pairs of IP protocols and ports that the rule should match.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.compute.v1.FirewallPolicyRuleMatcherLayer4Config layer4_configs = 373534261;
   * </code>
   */
  com.google.cloud.compute.v1.FirewallPolicyRuleMatcherLayer4Config getLayer4Configs(int index);
  /**
   *
   *
   * <pre>
   * Pairs of IP protocols and ports that the rule should match.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.compute.v1.FirewallPolicyRuleMatcherLayer4Config layer4_configs = 373534261;
   * </code>
   */
  int getLayer4ConfigsCount();
  /**
   *
   *
   * <pre>
   * Pairs of IP protocols and ports that the rule should match.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.compute.v1.FirewallPolicyRuleMatcherLayer4Config layer4_configs = 373534261;
   * </code>
   */
  java.util.List<
          ? extends com.google.cloud.compute.v1.FirewallPolicyRuleMatcherLayer4ConfigOrBuilder>
      getLayer4ConfigsOrBuilderList();
  /**
   *
   *
   * <pre>
   * Pairs of IP protocols and ports that the rule should match.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.compute.v1.FirewallPolicyRuleMatcherLayer4Config layer4_configs = 373534261;
   * </code>
   */
  com.google.cloud.compute.v1.FirewallPolicyRuleMatcherLayer4ConfigOrBuilder
      getLayer4ConfigsOrBuilder(int index);

  /**
   *
   *
   * <pre>
   * CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 5000.
   * </pre>
   *
   * <code>repeated string src_ip_ranges = 432128083;</code>
   *
   * @return A list containing the srcIpRanges.
   */
  java.util.List<java.lang.String> getSrcIpRangesList();
  /**
   *
   *
   * <pre>
   * CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 5000.
   * </pre>
   *
   * <code>repeated string src_ip_ranges = 432128083;</code>
   *
   * @return The count of srcIpRanges.
   */
  int getSrcIpRangesCount();
  /**
   *
   *
   * <pre>
   * CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 5000.
   * </pre>
   *
   * <code>repeated string src_ip_ranges = 432128083;</code>
   *
   * @param index The index of the element to return.
   * @return The srcIpRanges at the given index.
   */
  java.lang.String getSrcIpRanges(int index);
  /**
   *
   *
   * <pre>
   * CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 5000.
   * </pre>
   *
   * <code>repeated string src_ip_ranges = 432128083;</code>
   *
   * @param index The index of the value to return.
   * @return The bytes of the srcIpRanges at the given index.
   */
  com.google.protobuf.ByteString getSrcIpRangesBytes(int index);

  /**
   *
   *
   * <pre>
   * List of secure tag values, which should be matched at the source of the traffic. For INGRESS rule, if all the srcSecureTag are INEFFECTIVE, and there is no srcIpRange, this rule will be ignored. Maximum number of source tag values allowed is 256.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.compute.v1.FirewallPolicyRuleSecureTag src_secure_tags = 508791302;
   * </code>
   */
  java.util.List<com.google.cloud.compute.v1.FirewallPolicyRuleSecureTag> getSrcSecureTagsList();
  /**
   *
   *
   * <pre>
   * List of secure tag values, which should be matched at the source of the traffic. For INGRESS rule, if all the srcSecureTag are INEFFECTIVE, and there is no srcIpRange, this rule will be ignored. Maximum number of source tag values allowed is 256.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.compute.v1.FirewallPolicyRuleSecureTag src_secure_tags = 508791302;
   * </code>
   */
  com.google.cloud.compute.v1.FirewallPolicyRuleSecureTag getSrcSecureTags(int index);
  /**
   *
   *
   * <pre>
   * List of secure tag values, which should be matched at the source of the traffic. For INGRESS rule, if all the srcSecureTag are INEFFECTIVE, and there is no srcIpRange, this rule will be ignored. Maximum number of source tag values allowed is 256.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.compute.v1.FirewallPolicyRuleSecureTag src_secure_tags = 508791302;
   * </code>
   */
  int getSrcSecureTagsCount();
  /**
   *
   *
   * <pre>
   * List of secure tag values, which should be matched at the source of the traffic. For INGRESS rule, if all the srcSecureTag are INEFFECTIVE, and there is no srcIpRange, this rule will be ignored. Maximum number of source tag values allowed is 256.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.compute.v1.FirewallPolicyRuleSecureTag src_secure_tags = 508791302;
   * </code>
   */
  java.util.List<? extends com.google.cloud.compute.v1.FirewallPolicyRuleSecureTagOrBuilder>
      getSrcSecureTagsOrBuilderList();
  /**
   *
   *
   * <pre>
   * List of secure tag values, which should be matched at the source of the traffic. For INGRESS rule, if all the srcSecureTag are INEFFECTIVE, and there is no srcIpRange, this rule will be ignored. Maximum number of source tag values allowed is 256.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.compute.v1.FirewallPolicyRuleSecureTag src_secure_tags = 508791302;
   * </code>
   */
  com.google.cloud.compute.v1.FirewallPolicyRuleSecureTagOrBuilder getSrcSecureTagsOrBuilder(
      int index);
}
