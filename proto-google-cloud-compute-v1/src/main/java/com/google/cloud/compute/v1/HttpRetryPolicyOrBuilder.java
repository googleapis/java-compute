/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/compute/v1/compute.proto

package com.google.cloud.compute.v1;

public interface HttpRetryPolicyOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.compute.v1.HttpRetryPolicy)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Specifies the allowed number retries. This number must be &gt; 0. If not specified, defaults to 1.
   * </pre>
   *
   * <code>uint32 num_retries = 251680141;</code>
   *
   * @return The numRetries.
   */
  int getNumRetries();

  /**
   *
   *
   * <pre>
   * Specifies a non-zero timeout per retry attempt.
   * If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set, will use the largest timeout among all backend services associated with the route.
   * </pre>
   *
   * <code>.google.cloud.compute.v1.Duration per_try_timeout = 11605691;</code>
   *
   * @return Whether the perTryTimeout field is set.
   */
  boolean hasPerTryTimeout();
  /**
   *
   *
   * <pre>
   * Specifies a non-zero timeout per retry attempt.
   * If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set, will use the largest timeout among all backend services associated with the route.
   * </pre>
   *
   * <code>.google.cloud.compute.v1.Duration per_try_timeout = 11605691;</code>
   *
   * @return The perTryTimeout.
   */
  com.google.cloud.compute.v1.Duration getPerTryTimeout();
  /**
   *
   *
   * <pre>
   * Specifies a non-zero timeout per retry attempt.
   * If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set, will use the largest timeout among all backend services associated with the route.
   * </pre>
   *
   * <code>.google.cloud.compute.v1.Duration per_try_timeout = 11605691;</code>
   */
  com.google.cloud.compute.v1.DurationOrBuilder getPerTryTimeoutOrBuilder();

  /**
   *
   *
   * <pre>
   * Specfies one or more conditions when this retry rule applies. Valid values are:
   * - 5xx: Loadbalancer will attempt a retry if the backend service responds with any 5xx response code, or if the backend service does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams.
   * - gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504.
   * -
   * - connect-failure: Loadbalancer will retry on failures connecting to backend services, for example due to connection timeouts.
   * - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes. Currently the only retriable error supported is 409.
   * - refused-stream:Loadbalancer will retry if the backend service resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
   * - cancelledLoadbalancer will retry if the gRPC status code in the response header is set to cancelled
   * - deadline-exceeded: Loadbalancer will retry if the gRPC status code in the response header is set to deadline-exceeded
   * - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response header is set to resource-exhausted
   * - unavailable: Loadbalancer will retry if the gRPC status code in the response header is set to unavailable
   * </pre>
   *
   * <code>repeated string retry_conditions = 28815535;</code>
   *
   * @return A list containing the retryConditions.
   */
  java.util.List<java.lang.String> getRetryConditionsList();
  /**
   *
   *
   * <pre>
   * Specfies one or more conditions when this retry rule applies. Valid values are:
   * - 5xx: Loadbalancer will attempt a retry if the backend service responds with any 5xx response code, or if the backend service does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams.
   * - gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504.
   * -
   * - connect-failure: Loadbalancer will retry on failures connecting to backend services, for example due to connection timeouts.
   * - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes. Currently the only retriable error supported is 409.
   * - refused-stream:Loadbalancer will retry if the backend service resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
   * - cancelledLoadbalancer will retry if the gRPC status code in the response header is set to cancelled
   * - deadline-exceeded: Loadbalancer will retry if the gRPC status code in the response header is set to deadline-exceeded
   * - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response header is set to resource-exhausted
   * - unavailable: Loadbalancer will retry if the gRPC status code in the response header is set to unavailable
   * </pre>
   *
   * <code>repeated string retry_conditions = 28815535;</code>
   *
   * @return The count of retryConditions.
   */
  int getRetryConditionsCount();
  /**
   *
   *
   * <pre>
   * Specfies one or more conditions when this retry rule applies. Valid values are:
   * - 5xx: Loadbalancer will attempt a retry if the backend service responds with any 5xx response code, or if the backend service does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams.
   * - gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504.
   * -
   * - connect-failure: Loadbalancer will retry on failures connecting to backend services, for example due to connection timeouts.
   * - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes. Currently the only retriable error supported is 409.
   * - refused-stream:Loadbalancer will retry if the backend service resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
   * - cancelledLoadbalancer will retry if the gRPC status code in the response header is set to cancelled
   * - deadline-exceeded: Loadbalancer will retry if the gRPC status code in the response header is set to deadline-exceeded
   * - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response header is set to resource-exhausted
   * - unavailable: Loadbalancer will retry if the gRPC status code in the response header is set to unavailable
   * </pre>
   *
   * <code>repeated string retry_conditions = 28815535;</code>
   *
   * @param index The index of the element to return.
   * @return The retryConditions at the given index.
   */
  java.lang.String getRetryConditions(int index);
  /**
   *
   *
   * <pre>
   * Specfies one or more conditions when this retry rule applies. Valid values are:
   * - 5xx: Loadbalancer will attempt a retry if the backend service responds with any 5xx response code, or if the backend service does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams.
   * - gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504.
   * -
   * - connect-failure: Loadbalancer will retry on failures connecting to backend services, for example due to connection timeouts.
   * - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes. Currently the only retriable error supported is 409.
   * - refused-stream:Loadbalancer will retry if the backend service resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
   * - cancelledLoadbalancer will retry if the gRPC status code in the response header is set to cancelled
   * - deadline-exceeded: Loadbalancer will retry if the gRPC status code in the response header is set to deadline-exceeded
   * - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response header is set to resource-exhausted
   * - unavailable: Loadbalancer will retry if the gRPC status code in the response header is set to unavailable
   * </pre>
   *
   * <code>repeated string retry_conditions = 28815535;</code>
   *
   * @param index The index of the value to return.
   * @return The bytes of the retryConditions at the given index.
   */
  com.google.protobuf.ByteString getRetryConditionsBytes(int index);
}
