/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/compute/v1/compute.proto

package com.google.cloud.compute.v1;

/**
 *
 *
 * <pre>
 * </pre>
 *
 * Protobuf type {@code google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower}
 */
public final class InterconnectDiagnosticsLinkOpticalPower
    extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower)
    InterconnectDiagnosticsLinkOpticalPowerOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use InterconnectDiagnosticsLinkOpticalPower.newBuilder() to construct.
  private InterconnectDiagnosticsLinkOpticalPower(
      com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private InterconnectDiagnosticsLinkOpticalPower() {
    state_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new InterconnectDiagnosticsLinkOpticalPower();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  private InterconnectDiagnosticsLinkOpticalPower(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 878060680:
            {
              int rawValue = input.readEnum();

              state_ = rawValue;
              break;
            }
          case 895781773:
            {
              value_ = input.readFloat();
              break;
            }
          default:
            {
              if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.cloud.compute.v1.Compute
        .internal_static_google_cloud_compute_v1_InterconnectDiagnosticsLinkOpticalPower_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.compute.v1.Compute
        .internal_static_google_cloud_compute_v1_InterconnectDiagnosticsLinkOpticalPower_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.class,
            com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.Builder.class);
  }

  /**
   *
   *
   * <pre>
   * The status of the current value when compared to the warning and alarm levels for the receiving or transmitting transceiver. Possible states include:
   * - OK: The value has not crossed a warning threshold.
   * - LOW_WARNING: The value has crossed below the low warning threshold.
   * - HIGH_WARNING: The value has crossed above the high warning threshold.
   * - LOW_ALARM: The value has crossed below the low alarm threshold.
   * - HIGH_ALARM: The value has crossed above the high alarm threshold.
   * </pre>
   *
   * Protobuf enum {@code google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.State}
   */
  public enum State implements com.google.protobuf.ProtocolMessageEnum {
    /**
     *
     *
     * <pre>
     * A value indicating that the enum field is not set.
     * </pre>
     *
     * <code>UNDEFINED_STATE = 0;</code>
     */
    UNDEFINED_STATE(0),
    /** <code>HIGH_ALARM = 36927828;</code> */
    HIGH_ALARM(36927828),
    /** <code>HIGH_WARNING = 220984799;</code> */
    HIGH_WARNING(220984799),
    /** <code>LOW_ALARM = 48223590;</code> */
    LOW_ALARM(48223590),
    /** <code>LOW_WARNING = 70358385;</code> */
    LOW_WARNING(70358385),
    /** <code>OK = 2524;</code> */
    OK(2524),
    UNRECOGNIZED(-1),
    ;

    /**
     *
     *
     * <pre>
     * A value indicating that the enum field is not set.
     * </pre>
     *
     * <code>UNDEFINED_STATE = 0;</code>
     */
    public static final int UNDEFINED_STATE_VALUE = 0;
    /** <code>HIGH_ALARM = 36927828;</code> */
    public static final int HIGH_ALARM_VALUE = 36927828;
    /** <code>HIGH_WARNING = 220984799;</code> */
    public static final int HIGH_WARNING_VALUE = 220984799;
    /** <code>LOW_ALARM = 48223590;</code> */
    public static final int LOW_ALARM_VALUE = 48223590;
    /** <code>LOW_WARNING = 70358385;</code> */
    public static final int LOW_WARNING_VALUE = 70358385;
    /** <code>OK = 2524;</code> */
    public static final int OK_VALUE = 2524;

    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static State valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static State forNumber(int value) {
      switch (value) {
        case 0:
          return UNDEFINED_STATE;
        case 36927828:
          return HIGH_ALARM;
        case 220984799:
          return HIGH_WARNING;
        case 48223590:
          return LOW_ALARM;
        case 70358385:
          return LOW_WARNING;
        case 2524:
          return OK;
        default:
          return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<State> internalGetValueMap() {
      return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<State> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<State>() {
          public State findValueByNumber(int number) {
            return State.forNumber(number);
          }
        };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
      return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
      return com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.getDescriptor()
          .getEnumTypes()
          .get(0);
    }

    private static final State[] VALUES = values();

    public static State valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private State(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.State)
  }

  public static final int STATE_FIELD_NUMBER = 109757585;
  private int state_;
  /**
   *
   *
   * <pre>
   * The status of the current value when compared to the warning and alarm levels for the receiving or transmitting transceiver. Possible states include:
   * - OK: The value has not crossed a warning threshold.
   * - LOW_WARNING: The value has crossed below the low warning threshold.
   * - HIGH_WARNING: The value has crossed above the high warning threshold.
   * - LOW_ALARM: The value has crossed below the low alarm threshold.
   * - HIGH_ALARM: The value has crossed above the high alarm threshold.
   * </pre>
   *
   * <code>.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.State state = 109757585;
   * </code>
   *
   * @return The enum numeric value on the wire for state.
   */
  @java.lang.Override
  public int getStateValue() {
    return state_;
  }
  /**
   *
   *
   * <pre>
   * The status of the current value when compared to the warning and alarm levels for the receiving or transmitting transceiver. Possible states include:
   * - OK: The value has not crossed a warning threshold.
   * - LOW_WARNING: The value has crossed below the low warning threshold.
   * - HIGH_WARNING: The value has crossed above the high warning threshold.
   * - LOW_ALARM: The value has crossed below the low alarm threshold.
   * - HIGH_ALARM: The value has crossed above the high alarm threshold.
   * </pre>
   *
   * <code>.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.State state = 109757585;
   * </code>
   *
   * @return The state.
   */
  @java.lang.Override
  public com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.State getState() {
    @SuppressWarnings("deprecation")
    com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.State result =
        com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.State.valueOf(state_);
    return result == null
        ? com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.State.UNRECOGNIZED
        : result;
  }

  public static final int VALUE_FIELD_NUMBER = 111972721;
  private float value_;
  /**
   *
   *
   * <pre>
   * Value of the current receiving or transmitting optical power, read in dBm. Take a known good optical value, give it a 10% margin and trigger warnings relative to that value. In general, a -7dBm warning and a -11dBm alarm are good optical value estimates for most links.
   * </pre>
   *
   * <code>float value = 111972721;</code>
   *
   * @return The value.
   */
  @java.lang.Override
  public float getValue() {
    return value_;
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (state_
        != com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.State.UNDEFINED_STATE
            .getNumber()) {
      output.writeEnum(109757585, state_);
    }
    if (value_ != 0F) {
      output.writeFloat(111972721, value_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (state_
        != com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.State.UNDEFINED_STATE
            .getNumber()) {
      size += com.google.protobuf.CodedOutputStream.computeEnumSize(109757585, state_);
    }
    if (value_ != 0F) {
      size += com.google.protobuf.CodedOutputStream.computeFloatSize(111972721, value_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower)) {
      return super.equals(obj);
    }
    com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower other =
        (com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower) obj;

    if (state_ != other.state_) return false;
    if (java.lang.Float.floatToIntBits(getValue())
        != java.lang.Float.floatToIntBits(other.getValue())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + STATE_FIELD_NUMBER;
    hash = (53 * hash) + state_;
    hash = (37 * hash) + VALUE_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(getValue());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower parseFrom(
      byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower
      parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower
      parseDelimitedFrom(
          java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(
      com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * </pre>
   *
   * Protobuf type {@code google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower)
      com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPowerOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.cloud.compute.v1.Compute
          .internal_static_google_cloud_compute_v1_InterconnectDiagnosticsLinkOpticalPower_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.compute.v1.Compute
          .internal_static_google_cloud_compute_v1_InterconnectDiagnosticsLinkOpticalPower_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.class,
              com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.Builder.class);
    }

    // Construct using
    // com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {}
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      state_ = 0;

      value_ = 0F;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.cloud.compute.v1.Compute
          .internal_static_google_cloud_compute_v1_InterconnectDiagnosticsLinkOpticalPower_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower
        getDefaultInstanceForType() {
      return com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower
          .getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower build() {
      com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower buildPartial() {
      com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower result =
          new com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower(this);
      result.state_ = state_;
      result.value_ = value_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower) {
        return mergeFrom(
            (com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(
        com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower other) {
      if (other
          == com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower
              .getDefaultInstance()) return this;
      if (other.state_ != 0) {
        setStateValue(other.getStateValue());
      }
      if (other.getValue() != 0F) {
        setValue(other.getValue());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage =
            (com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower)
                e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private int state_ = 0;
    /**
     *
     *
     * <pre>
     * The status of the current value when compared to the warning and alarm levels for the receiving or transmitting transceiver. Possible states include:
     * - OK: The value has not crossed a warning threshold.
     * - LOW_WARNING: The value has crossed below the low warning threshold.
     * - HIGH_WARNING: The value has crossed above the high warning threshold.
     * - LOW_ALARM: The value has crossed below the low alarm threshold.
     * - HIGH_ALARM: The value has crossed above the high alarm threshold.
     * </pre>
     *
     * <code>
     * .google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.State state = 109757585;
     * </code>
     *
     * @return The enum numeric value on the wire for state.
     */
    @java.lang.Override
    public int getStateValue() {
      return state_;
    }
    /**
     *
     *
     * <pre>
     * The status of the current value when compared to the warning and alarm levels for the receiving or transmitting transceiver. Possible states include:
     * - OK: The value has not crossed a warning threshold.
     * - LOW_WARNING: The value has crossed below the low warning threshold.
     * - HIGH_WARNING: The value has crossed above the high warning threshold.
     * - LOW_ALARM: The value has crossed below the low alarm threshold.
     * - HIGH_ALARM: The value has crossed above the high alarm threshold.
     * </pre>
     *
     * <code>
     * .google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.State state = 109757585;
     * </code>
     *
     * @param value The enum numeric value on the wire for state to set.
     * @return This builder for chaining.
     */
    public Builder setStateValue(int value) {

      state_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The status of the current value when compared to the warning and alarm levels for the receiving or transmitting transceiver. Possible states include:
     * - OK: The value has not crossed a warning threshold.
     * - LOW_WARNING: The value has crossed below the low warning threshold.
     * - HIGH_WARNING: The value has crossed above the high warning threshold.
     * - LOW_ALARM: The value has crossed below the low alarm threshold.
     * - HIGH_ALARM: The value has crossed above the high alarm threshold.
     * </pre>
     *
     * <code>
     * .google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.State state = 109757585;
     * </code>
     *
     * @return The state.
     */
    @java.lang.Override
    public com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.State getState() {
      @SuppressWarnings("deprecation")
      com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.State result =
          com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.State.valueOf(state_);
      return result == null
          ? com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.State.UNRECOGNIZED
          : result;
    }
    /**
     *
     *
     * <pre>
     * The status of the current value when compared to the warning and alarm levels for the receiving or transmitting transceiver. Possible states include:
     * - OK: The value has not crossed a warning threshold.
     * - LOW_WARNING: The value has crossed below the low warning threshold.
     * - HIGH_WARNING: The value has crossed above the high warning threshold.
     * - LOW_ALARM: The value has crossed below the low alarm threshold.
     * - HIGH_ALARM: The value has crossed above the high alarm threshold.
     * </pre>
     *
     * <code>
     * .google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.State state = 109757585;
     * </code>
     *
     * @param value The state to set.
     * @return This builder for chaining.
     */
    public Builder setState(
        com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.State value) {
      if (value == null) {
        throw new NullPointerException();
      }

      state_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The status of the current value when compared to the warning and alarm levels for the receiving or transmitting transceiver. Possible states include:
     * - OK: The value has not crossed a warning threshold.
     * - LOW_WARNING: The value has crossed below the low warning threshold.
     * - HIGH_WARNING: The value has crossed above the high warning threshold.
     * - LOW_ALARM: The value has crossed below the low alarm threshold.
     * - HIGH_ALARM: The value has crossed above the high alarm threshold.
     * </pre>
     *
     * <code>
     * .google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower.State state = 109757585;
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearState() {

      state_ = 0;
      onChanged();
      return this;
    }

    private float value_;
    /**
     *
     *
     * <pre>
     * Value of the current receiving or transmitting optical power, read in dBm. Take a known good optical value, give it a 10% margin and trigger warnings relative to that value. In general, a -7dBm warning and a -11dBm alarm are good optical value estimates for most links.
     * </pre>
     *
     * <code>float value = 111972721;</code>
     *
     * @return The value.
     */
    @java.lang.Override
    public float getValue() {
      return value_;
    }
    /**
     *
     *
     * <pre>
     * Value of the current receiving or transmitting optical power, read in dBm. Take a known good optical value, give it a 10% margin and trigger warnings relative to that value. In general, a -7dBm warning and a -11dBm alarm are good optical value estimates for most links.
     * </pre>
     *
     * <code>float value = 111972721;</code>
     *
     * @param value The value to set.
     * @return This builder for chaining.
     */
    public Builder setValue(float value) {

      value_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Value of the current receiving or transmitting optical power, read in dBm. Take a known good optical value, give it a 10% margin and trigger warnings relative to that value. In general, a -7dBm warning and a -11dBm alarm are good optical value estimates for most links.
     * </pre>
     *
     * <code>float value = 111972721;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearValue() {

      value_ = 0F;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower)
  private static final com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower
      DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower();
  }

  public static com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower
      getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<InterconnectDiagnosticsLinkOpticalPower> PARSER =
      new com.google.protobuf.AbstractParser<InterconnectDiagnosticsLinkOpticalPower>() {
        @java.lang.Override
        public InterconnectDiagnosticsLinkOpticalPower parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new InterconnectDiagnosticsLinkOpticalPower(input, extensionRegistry);
        }
      };

  public static com.google.protobuf.Parser<InterconnectDiagnosticsLinkOpticalPower> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<InterconnectDiagnosticsLinkOpticalPower> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.compute.v1.InterconnectDiagnosticsLinkOpticalPower
      getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
