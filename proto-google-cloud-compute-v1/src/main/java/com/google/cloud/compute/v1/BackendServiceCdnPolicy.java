/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/compute/v1/compute.proto

package com.google.cloud.compute.v1;

/**
 *
 *
 * <pre>
 * Message containing Cloud CDN configuration for a backend service.
 * </pre>
 *
 * Protobuf type {@code google.cloud.compute.v1.BackendServiceCdnPolicy}
 */
public final class BackendServiceCdnPolicy extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.cloud.compute.v1.BackendServiceCdnPolicy)
    BackendServiceCdnPolicyOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use BackendServiceCdnPolicy.newBuilder() to construct.
  private BackendServiceCdnPolicy(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private BackendServiceCdnPolicy() {
    cacheMode_ = 0;
    signedUrlCacheMaxAgeSec_ = "";
    signedUrlKeyNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new BackendServiceCdnPolicy();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  private BackendServiceCdnPolicy(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 7512626:
            {
              java.lang.String s = input.readStringRequireUtf8();

              signedUrlCacheMaxAgeSec_ = s;
              break;
            }
          case 231023104:
            {
              int rawValue = input.readEnum();

              cacheMode_ = rawValue;
              break;
            }
          case 232274880:
            {
              clientTtl_ = input.readInt32();
              break;
            }
          case 313140360:
            {
              maxTtl_ = input.readInt32();
              break;
            }
          case 802027376:
            {
              defaultTtl_ = input.readInt32();
              break;
            }
          case 827307434:
            {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                signedUrlKeyNames_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              signedUrlKeyNames_.add(s);
              break;
            }
          case 1274109818:
            {
              com.google.cloud.compute.v1.CacheKeyPolicy.Builder subBuilder = null;
              if (cacheKeyPolicy_ != null) {
                subBuilder = cacheKeyPolicy_.toBuilder();
              }
              cacheKeyPolicy_ =
                  input.readMessage(
                      com.google.cloud.compute.v1.CacheKeyPolicy.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(cacheKeyPolicy_);
                cacheKeyPolicy_ = subBuilder.buildPartial();
              }

              break;
            }
          default:
            {
              if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        signedUrlKeyNames_ = signedUrlKeyNames_.getUnmodifiableView();
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.cloud.compute.v1.Compute
        .internal_static_google_cloud_compute_v1_BackendServiceCdnPolicy_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.compute.v1.Compute
        .internal_static_google_cloud_compute_v1_BackendServiceCdnPolicy_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.compute.v1.BackendServiceCdnPolicy.class,
            com.google.cloud.compute.v1.BackendServiceCdnPolicy.Builder.class);
  }

  /**
   *
   *
   * <pre>
   * Specifies the cache setting for all responses from this backend. The possible values are:
   * USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server.
   * FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content.
   * CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
   * </pre>
   *
   * Protobuf enum {@code google.cloud.compute.v1.BackendServiceCdnPolicy.CacheMode}
   */
  public enum CacheMode implements com.google.protobuf.ProtocolMessageEnum {
    /**
     *
     *
     * <pre>
     * A value indicating that the enum field is not set.
     * </pre>
     *
     * <code>UNDEFINED_CACHE_MODE = 0;</code>
     */
    UNDEFINED_CACHE_MODE(0),
    /** <code>CACHE_ALL_STATIC = 86592489;</code> */
    CACHE_ALL_STATIC(86592489),
    /** <code>FORCE_CACHE_ALL = 217591472;</code> */
    FORCE_CACHE_ALL(217591472),
    /** <code>INVALID_CACHE_MODE = 112860104;</code> */
    INVALID_CACHE_MODE(112860104),
    /** <code>USE_ORIGIN_HEADERS = 55380261;</code> */
    USE_ORIGIN_HEADERS(55380261),
    UNRECOGNIZED(-1),
    ;

    /**
     *
     *
     * <pre>
     * A value indicating that the enum field is not set.
     * </pre>
     *
     * <code>UNDEFINED_CACHE_MODE = 0;</code>
     */
    public static final int UNDEFINED_CACHE_MODE_VALUE = 0;
    /** <code>CACHE_ALL_STATIC = 86592489;</code> */
    public static final int CACHE_ALL_STATIC_VALUE = 86592489;
    /** <code>FORCE_CACHE_ALL = 217591472;</code> */
    public static final int FORCE_CACHE_ALL_VALUE = 217591472;
    /** <code>INVALID_CACHE_MODE = 112860104;</code> */
    public static final int INVALID_CACHE_MODE_VALUE = 112860104;
    /** <code>USE_ORIGIN_HEADERS = 55380261;</code> */
    public static final int USE_ORIGIN_HEADERS_VALUE = 55380261;

    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CacheMode valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CacheMode forNumber(int value) {
      switch (value) {
        case 0:
          return UNDEFINED_CACHE_MODE;
        case 86592489:
          return CACHE_ALL_STATIC;
        case 217591472:
          return FORCE_CACHE_ALL;
        case 112860104:
          return INVALID_CACHE_MODE;
        case 55380261:
          return USE_ORIGIN_HEADERS;
        default:
          return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CacheMode> internalGetValueMap() {
      return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<CacheMode> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<CacheMode>() {
          public CacheMode findValueByNumber(int number) {
            return CacheMode.forNumber(number);
          }
        };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
      return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
      return com.google.cloud.compute.v1.BackendServiceCdnPolicy.getDescriptor()
          .getEnumTypes()
          .get(0);
    }

    private static final CacheMode[] VALUES = values();

    public static CacheMode valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CacheMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.cloud.compute.v1.BackendServiceCdnPolicy.CacheMode)
  }

  public static final int CACHE_KEY_POLICY_FIELD_NUMBER = 159263727;
  private com.google.cloud.compute.v1.CacheKeyPolicy cacheKeyPolicy_;
  /**
   *
   *
   * <pre>
   * The CacheKeyPolicy for this CdnPolicy.
   * </pre>
   *
   * <code>.google.cloud.compute.v1.CacheKeyPolicy cache_key_policy = 159263727;</code>
   *
   * @return Whether the cacheKeyPolicy field is set.
   */
  @java.lang.Override
  public boolean hasCacheKeyPolicy() {
    return cacheKeyPolicy_ != null;
  }
  /**
   *
   *
   * <pre>
   * The CacheKeyPolicy for this CdnPolicy.
   * </pre>
   *
   * <code>.google.cloud.compute.v1.CacheKeyPolicy cache_key_policy = 159263727;</code>
   *
   * @return The cacheKeyPolicy.
   */
  @java.lang.Override
  public com.google.cloud.compute.v1.CacheKeyPolicy getCacheKeyPolicy() {
    return cacheKeyPolicy_ == null
        ? com.google.cloud.compute.v1.CacheKeyPolicy.getDefaultInstance()
        : cacheKeyPolicy_;
  }
  /**
   *
   *
   * <pre>
   * The CacheKeyPolicy for this CdnPolicy.
   * </pre>
   *
   * <code>.google.cloud.compute.v1.CacheKeyPolicy cache_key_policy = 159263727;</code>
   */
  @java.lang.Override
  public com.google.cloud.compute.v1.CacheKeyPolicyOrBuilder getCacheKeyPolicyOrBuilder() {
    return getCacheKeyPolicy();
  }

  public static final int CACHE_MODE_FIELD_NUMBER = 28877888;
  private int cacheMode_;
  /**
   *
   *
   * <pre>
   * Specifies the cache setting for all responses from this backend. The possible values are:
   * USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server.
   * FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content.
   * CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
   * </pre>
   *
   * <code>.google.cloud.compute.v1.BackendServiceCdnPolicy.CacheMode cache_mode = 28877888;</code>
   *
   * @return The enum numeric value on the wire for cacheMode.
   */
  @java.lang.Override
  public int getCacheModeValue() {
    return cacheMode_;
  }
  /**
   *
   *
   * <pre>
   * Specifies the cache setting for all responses from this backend. The possible values are:
   * USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server.
   * FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content.
   * CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
   * </pre>
   *
   * <code>.google.cloud.compute.v1.BackendServiceCdnPolicy.CacheMode cache_mode = 28877888;</code>
   *
   * @return The cacheMode.
   */
  @java.lang.Override
  public com.google.cloud.compute.v1.BackendServiceCdnPolicy.CacheMode getCacheMode() {
    @SuppressWarnings("deprecation")
    com.google.cloud.compute.v1.BackendServiceCdnPolicy.CacheMode result =
        com.google.cloud.compute.v1.BackendServiceCdnPolicy.CacheMode.valueOf(cacheMode_);
    return result == null
        ? com.google.cloud.compute.v1.BackendServiceCdnPolicy.CacheMode.UNRECOGNIZED
        : result;
  }

  public static final int CLIENT_TTL_FIELD_NUMBER = 29034360;
  private int clientTtl_;
  /**
   *
   *
   * <pre>
   * Specifies a separate client (e.g. browser client) TTL, separate from the TTL for Cloud CDN's edge caches. Leaving this empty will use the same cache TTL for both Cloud CDN and the client-facing response. The maximum allowed value is 86400s (1 day).
   * </pre>
   *
   * <code>int32 client_ttl = 29034360;</code>
   *
   * @return The clientTtl.
   */
  @java.lang.Override
  public int getClientTtl() {
    return clientTtl_;
  }

  public static final int DEFAULT_TTL_FIELD_NUMBER = 100253422;
  private int defaultTtl_;
  /**
   *
   *
   * <pre>
   * Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
   * </pre>
   *
   * <code>int32 default_ttl = 100253422;</code>
   *
   * @return The defaultTtl.
   */
  @java.lang.Override
  public int getDefaultTtl() {
    return defaultTtl_;
  }

  public static final int MAX_TTL_FIELD_NUMBER = 39142545;
  private int maxTtl_;
  /**
   *
   *
   * <pre>
   * Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
   * </pre>
   *
   * <code>int32 max_ttl = 39142545;</code>
   *
   * @return The maxTtl.
   */
  @java.lang.Override
  public int getMaxTtl() {
    return maxTtl_;
  }

  public static final int SIGNED_URL_CACHE_MAX_AGE_SEC_FIELD_NUMBER = 939078;
  private volatile java.lang.Object signedUrlCacheMaxAgeSec_;
  /**
   *
   *
   * <pre>
   * Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
   * </pre>
   *
   * <code>string signed_url_cache_max_age_sec = 939078;</code>
   *
   * @return The signedUrlCacheMaxAgeSec.
   */
  @java.lang.Override
  public java.lang.String getSignedUrlCacheMaxAgeSec() {
    java.lang.Object ref = signedUrlCacheMaxAgeSec_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      signedUrlCacheMaxAgeSec_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
   * </pre>
   *
   * <code>string signed_url_cache_max_age_sec = 939078;</code>
   *
   * @return The bytes for signedUrlCacheMaxAgeSec.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getSignedUrlCacheMaxAgeSecBytes() {
    java.lang.Object ref = signedUrlCacheMaxAgeSec_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      signedUrlCacheMaxAgeSec_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SIGNED_URL_KEY_NAMES_FIELD_NUMBER = 103413429;
  private com.google.protobuf.LazyStringList signedUrlKeyNames_;
  /**
   *
   *
   * <pre>
   * [Output Only] Names of the keys for signing request URLs.
   * </pre>
   *
   * <code>repeated string signed_url_key_names = 103413429;</code>
   *
   * @return A list containing the signedUrlKeyNames.
   */
  public com.google.protobuf.ProtocolStringList getSignedUrlKeyNamesList() {
    return signedUrlKeyNames_;
  }
  /**
   *
   *
   * <pre>
   * [Output Only] Names of the keys for signing request URLs.
   * </pre>
   *
   * <code>repeated string signed_url_key_names = 103413429;</code>
   *
   * @return The count of signedUrlKeyNames.
   */
  public int getSignedUrlKeyNamesCount() {
    return signedUrlKeyNames_.size();
  }
  /**
   *
   *
   * <pre>
   * [Output Only] Names of the keys for signing request URLs.
   * </pre>
   *
   * <code>repeated string signed_url_key_names = 103413429;</code>
   *
   * @param index The index of the element to return.
   * @return The signedUrlKeyNames at the given index.
   */
  public java.lang.String getSignedUrlKeyNames(int index) {
    return signedUrlKeyNames_.get(index);
  }
  /**
   *
   *
   * <pre>
   * [Output Only] Names of the keys for signing request URLs.
   * </pre>
   *
   * <code>repeated string signed_url_key_names = 103413429;</code>
   *
   * @param index The index of the value to return.
   * @return The bytes of the signedUrlKeyNames at the given index.
   */
  public com.google.protobuf.ByteString getSignedUrlKeyNamesBytes(int index) {
    return signedUrlKeyNames_.getByteString(index);
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!getSignedUrlCacheMaxAgeSecBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 939078, signedUrlCacheMaxAgeSec_);
    }
    if (cacheMode_
        != com.google.cloud.compute.v1.BackendServiceCdnPolicy.CacheMode.UNDEFINED_CACHE_MODE
            .getNumber()) {
      output.writeEnum(28877888, cacheMode_);
    }
    if (clientTtl_ != 0) {
      output.writeInt32(29034360, clientTtl_);
    }
    if (maxTtl_ != 0) {
      output.writeInt32(39142545, maxTtl_);
    }
    if (defaultTtl_ != 0) {
      output.writeInt32(100253422, defaultTtl_);
    }
    for (int i = 0; i < signedUrlKeyNames_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(
          output, 103413429, signedUrlKeyNames_.getRaw(i));
    }
    if (cacheKeyPolicy_ != null) {
      output.writeMessage(159263727, getCacheKeyPolicy());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getSignedUrlCacheMaxAgeSecBytes().isEmpty()) {
      size +=
          com.google.protobuf.GeneratedMessageV3.computeStringSize(
              939078, signedUrlCacheMaxAgeSec_);
    }
    if (cacheMode_
        != com.google.cloud.compute.v1.BackendServiceCdnPolicy.CacheMode.UNDEFINED_CACHE_MODE
            .getNumber()) {
      size += com.google.protobuf.CodedOutputStream.computeEnumSize(28877888, cacheMode_);
    }
    if (clientTtl_ != 0) {
      size += com.google.protobuf.CodedOutputStream.computeInt32Size(29034360, clientTtl_);
    }
    if (maxTtl_ != 0) {
      size += com.google.protobuf.CodedOutputStream.computeInt32Size(39142545, maxTtl_);
    }
    if (defaultTtl_ != 0) {
      size += com.google.protobuf.CodedOutputStream.computeInt32Size(100253422, defaultTtl_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < signedUrlKeyNames_.size(); i++) {
        dataSize += computeStringSizeNoTag(signedUrlKeyNames_.getRaw(i));
      }
      size += dataSize;
      size += 5 * getSignedUrlKeyNamesList().size();
    }
    if (cacheKeyPolicy_ != null) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(159263727, getCacheKeyPolicy());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.cloud.compute.v1.BackendServiceCdnPolicy)) {
      return super.equals(obj);
    }
    com.google.cloud.compute.v1.BackendServiceCdnPolicy other =
        (com.google.cloud.compute.v1.BackendServiceCdnPolicy) obj;

    if (hasCacheKeyPolicy() != other.hasCacheKeyPolicy()) return false;
    if (hasCacheKeyPolicy()) {
      if (!getCacheKeyPolicy().equals(other.getCacheKeyPolicy())) return false;
    }
    if (cacheMode_ != other.cacheMode_) return false;
    if (getClientTtl() != other.getClientTtl()) return false;
    if (getDefaultTtl() != other.getDefaultTtl()) return false;
    if (getMaxTtl() != other.getMaxTtl()) return false;
    if (!getSignedUrlCacheMaxAgeSec().equals(other.getSignedUrlCacheMaxAgeSec())) return false;
    if (!getSignedUrlKeyNamesList().equals(other.getSignedUrlKeyNamesList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasCacheKeyPolicy()) {
      hash = (37 * hash) + CACHE_KEY_POLICY_FIELD_NUMBER;
      hash = (53 * hash) + getCacheKeyPolicy().hashCode();
    }
    hash = (37 * hash) + CACHE_MODE_FIELD_NUMBER;
    hash = (53 * hash) + cacheMode_;
    hash = (37 * hash) + CLIENT_TTL_FIELD_NUMBER;
    hash = (53 * hash) + getClientTtl();
    hash = (37 * hash) + DEFAULT_TTL_FIELD_NUMBER;
    hash = (53 * hash) + getDefaultTtl();
    hash = (37 * hash) + MAX_TTL_FIELD_NUMBER;
    hash = (53 * hash) + getMaxTtl();
    hash = (37 * hash) + SIGNED_URL_CACHE_MAX_AGE_SEC_FIELD_NUMBER;
    hash = (53 * hash) + getSignedUrlCacheMaxAgeSec().hashCode();
    if (getSignedUrlKeyNamesCount() > 0) {
      hash = (37 * hash) + SIGNED_URL_KEY_NAMES_FIELD_NUMBER;
      hash = (53 * hash) + getSignedUrlKeyNamesList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.compute.v1.BackendServiceCdnPolicy parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.compute.v1.BackendServiceCdnPolicy parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.compute.v1.BackendServiceCdnPolicy parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.compute.v1.BackendServiceCdnPolicy parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.compute.v1.BackendServiceCdnPolicy parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.compute.v1.BackendServiceCdnPolicy parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.compute.v1.BackendServiceCdnPolicy parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.compute.v1.BackendServiceCdnPolicy parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.compute.v1.BackendServiceCdnPolicy parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.cloud.compute.v1.BackendServiceCdnPolicy parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.compute.v1.BackendServiceCdnPolicy parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.compute.v1.BackendServiceCdnPolicy parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.cloud.compute.v1.BackendServiceCdnPolicy prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * Message containing Cloud CDN configuration for a backend service.
   * </pre>
   *
   * Protobuf type {@code google.cloud.compute.v1.BackendServiceCdnPolicy}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.cloud.compute.v1.BackendServiceCdnPolicy)
      com.google.cloud.compute.v1.BackendServiceCdnPolicyOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.cloud.compute.v1.Compute
          .internal_static_google_cloud_compute_v1_BackendServiceCdnPolicy_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.compute.v1.Compute
          .internal_static_google_cloud_compute_v1_BackendServiceCdnPolicy_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.compute.v1.BackendServiceCdnPolicy.class,
              com.google.cloud.compute.v1.BackendServiceCdnPolicy.Builder.class);
    }

    // Construct using com.google.cloud.compute.v1.BackendServiceCdnPolicy.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {}
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (cacheKeyPolicyBuilder_ == null) {
        cacheKeyPolicy_ = null;
      } else {
        cacheKeyPolicy_ = null;
        cacheKeyPolicyBuilder_ = null;
      }
      cacheMode_ = 0;

      clientTtl_ = 0;

      defaultTtl_ = 0;

      maxTtl_ = 0;

      signedUrlCacheMaxAgeSec_ = "";

      signedUrlKeyNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.cloud.compute.v1.Compute
          .internal_static_google_cloud_compute_v1_BackendServiceCdnPolicy_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.compute.v1.BackendServiceCdnPolicy getDefaultInstanceForType() {
      return com.google.cloud.compute.v1.BackendServiceCdnPolicy.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.compute.v1.BackendServiceCdnPolicy build() {
      com.google.cloud.compute.v1.BackendServiceCdnPolicy result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.compute.v1.BackendServiceCdnPolicy buildPartial() {
      com.google.cloud.compute.v1.BackendServiceCdnPolicy result =
          new com.google.cloud.compute.v1.BackendServiceCdnPolicy(this);
      int from_bitField0_ = bitField0_;
      if (cacheKeyPolicyBuilder_ == null) {
        result.cacheKeyPolicy_ = cacheKeyPolicy_;
      } else {
        result.cacheKeyPolicy_ = cacheKeyPolicyBuilder_.build();
      }
      result.cacheMode_ = cacheMode_;
      result.clientTtl_ = clientTtl_;
      result.defaultTtl_ = defaultTtl_;
      result.maxTtl_ = maxTtl_;
      result.signedUrlCacheMaxAgeSec_ = signedUrlCacheMaxAgeSec_;
      if (((bitField0_ & 0x00000001) != 0)) {
        signedUrlKeyNames_ = signedUrlKeyNames_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.signedUrlKeyNames_ = signedUrlKeyNames_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.compute.v1.BackendServiceCdnPolicy) {
        return mergeFrom((com.google.cloud.compute.v1.BackendServiceCdnPolicy) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.compute.v1.BackendServiceCdnPolicy other) {
      if (other == com.google.cloud.compute.v1.BackendServiceCdnPolicy.getDefaultInstance())
        return this;
      if (other.hasCacheKeyPolicy()) {
        mergeCacheKeyPolicy(other.getCacheKeyPolicy());
      }
      if (other.cacheMode_ != 0) {
        setCacheModeValue(other.getCacheModeValue());
      }
      if (other.getClientTtl() != 0) {
        setClientTtl(other.getClientTtl());
      }
      if (other.getDefaultTtl() != 0) {
        setDefaultTtl(other.getDefaultTtl());
      }
      if (other.getMaxTtl() != 0) {
        setMaxTtl(other.getMaxTtl());
      }
      if (!other.getSignedUrlCacheMaxAgeSec().isEmpty()) {
        signedUrlCacheMaxAgeSec_ = other.signedUrlCacheMaxAgeSec_;
        onChanged();
      }
      if (!other.signedUrlKeyNames_.isEmpty()) {
        if (signedUrlKeyNames_.isEmpty()) {
          signedUrlKeyNames_ = other.signedUrlKeyNames_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureSignedUrlKeyNamesIsMutable();
          signedUrlKeyNames_.addAll(other.signedUrlKeyNames_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.cloud.compute.v1.BackendServiceCdnPolicy parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage =
            (com.google.cloud.compute.v1.BackendServiceCdnPolicy) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private int bitField0_;

    private com.google.cloud.compute.v1.CacheKeyPolicy cacheKeyPolicy_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.compute.v1.CacheKeyPolicy,
            com.google.cloud.compute.v1.CacheKeyPolicy.Builder,
            com.google.cloud.compute.v1.CacheKeyPolicyOrBuilder>
        cacheKeyPolicyBuilder_;
    /**
     *
     *
     * <pre>
     * The CacheKeyPolicy for this CdnPolicy.
     * </pre>
     *
     * <code>.google.cloud.compute.v1.CacheKeyPolicy cache_key_policy = 159263727;</code>
     *
     * @return Whether the cacheKeyPolicy field is set.
     */
    public boolean hasCacheKeyPolicy() {
      return cacheKeyPolicyBuilder_ != null || cacheKeyPolicy_ != null;
    }
    /**
     *
     *
     * <pre>
     * The CacheKeyPolicy for this CdnPolicy.
     * </pre>
     *
     * <code>.google.cloud.compute.v1.CacheKeyPolicy cache_key_policy = 159263727;</code>
     *
     * @return The cacheKeyPolicy.
     */
    public com.google.cloud.compute.v1.CacheKeyPolicy getCacheKeyPolicy() {
      if (cacheKeyPolicyBuilder_ == null) {
        return cacheKeyPolicy_ == null
            ? com.google.cloud.compute.v1.CacheKeyPolicy.getDefaultInstance()
            : cacheKeyPolicy_;
      } else {
        return cacheKeyPolicyBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * The CacheKeyPolicy for this CdnPolicy.
     * </pre>
     *
     * <code>.google.cloud.compute.v1.CacheKeyPolicy cache_key_policy = 159263727;</code>
     */
    public Builder setCacheKeyPolicy(com.google.cloud.compute.v1.CacheKeyPolicy value) {
      if (cacheKeyPolicyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        cacheKeyPolicy_ = value;
        onChanged();
      } else {
        cacheKeyPolicyBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * The CacheKeyPolicy for this CdnPolicy.
     * </pre>
     *
     * <code>.google.cloud.compute.v1.CacheKeyPolicy cache_key_policy = 159263727;</code>
     */
    public Builder setCacheKeyPolicy(
        com.google.cloud.compute.v1.CacheKeyPolicy.Builder builderForValue) {
      if (cacheKeyPolicyBuilder_ == null) {
        cacheKeyPolicy_ = builderForValue.build();
        onChanged();
      } else {
        cacheKeyPolicyBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * The CacheKeyPolicy for this CdnPolicy.
     * </pre>
     *
     * <code>.google.cloud.compute.v1.CacheKeyPolicy cache_key_policy = 159263727;</code>
     */
    public Builder mergeCacheKeyPolicy(com.google.cloud.compute.v1.CacheKeyPolicy value) {
      if (cacheKeyPolicyBuilder_ == null) {
        if (cacheKeyPolicy_ != null) {
          cacheKeyPolicy_ =
              com.google.cloud.compute.v1.CacheKeyPolicy.newBuilder(cacheKeyPolicy_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          cacheKeyPolicy_ = value;
        }
        onChanged();
      } else {
        cacheKeyPolicyBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * The CacheKeyPolicy for this CdnPolicy.
     * </pre>
     *
     * <code>.google.cloud.compute.v1.CacheKeyPolicy cache_key_policy = 159263727;</code>
     */
    public Builder clearCacheKeyPolicy() {
      if (cacheKeyPolicyBuilder_ == null) {
        cacheKeyPolicy_ = null;
        onChanged();
      } else {
        cacheKeyPolicy_ = null;
        cacheKeyPolicyBuilder_ = null;
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * The CacheKeyPolicy for this CdnPolicy.
     * </pre>
     *
     * <code>.google.cloud.compute.v1.CacheKeyPolicy cache_key_policy = 159263727;</code>
     */
    public com.google.cloud.compute.v1.CacheKeyPolicy.Builder getCacheKeyPolicyBuilder() {

      onChanged();
      return getCacheKeyPolicyFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * The CacheKeyPolicy for this CdnPolicy.
     * </pre>
     *
     * <code>.google.cloud.compute.v1.CacheKeyPolicy cache_key_policy = 159263727;</code>
     */
    public com.google.cloud.compute.v1.CacheKeyPolicyOrBuilder getCacheKeyPolicyOrBuilder() {
      if (cacheKeyPolicyBuilder_ != null) {
        return cacheKeyPolicyBuilder_.getMessageOrBuilder();
      } else {
        return cacheKeyPolicy_ == null
            ? com.google.cloud.compute.v1.CacheKeyPolicy.getDefaultInstance()
            : cacheKeyPolicy_;
      }
    }
    /**
     *
     *
     * <pre>
     * The CacheKeyPolicy for this CdnPolicy.
     * </pre>
     *
     * <code>.google.cloud.compute.v1.CacheKeyPolicy cache_key_policy = 159263727;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.compute.v1.CacheKeyPolicy,
            com.google.cloud.compute.v1.CacheKeyPolicy.Builder,
            com.google.cloud.compute.v1.CacheKeyPolicyOrBuilder>
        getCacheKeyPolicyFieldBuilder() {
      if (cacheKeyPolicyBuilder_ == null) {
        cacheKeyPolicyBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.compute.v1.CacheKeyPolicy,
                com.google.cloud.compute.v1.CacheKeyPolicy.Builder,
                com.google.cloud.compute.v1.CacheKeyPolicyOrBuilder>(
                getCacheKeyPolicy(), getParentForChildren(), isClean());
        cacheKeyPolicy_ = null;
      }
      return cacheKeyPolicyBuilder_;
    }

    private int cacheMode_ = 0;
    /**
     *
     *
     * <pre>
     * Specifies the cache setting for all responses from this backend. The possible values are:
     * USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server.
     * FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content.
     * CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
     * </pre>
     *
     * <code>.google.cloud.compute.v1.BackendServiceCdnPolicy.CacheMode cache_mode = 28877888;
     * </code>
     *
     * @return The enum numeric value on the wire for cacheMode.
     */
    @java.lang.Override
    public int getCacheModeValue() {
      return cacheMode_;
    }
    /**
     *
     *
     * <pre>
     * Specifies the cache setting for all responses from this backend. The possible values are:
     * USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server.
     * FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content.
     * CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
     * </pre>
     *
     * <code>.google.cloud.compute.v1.BackendServiceCdnPolicy.CacheMode cache_mode = 28877888;
     * </code>
     *
     * @param value The enum numeric value on the wire for cacheMode to set.
     * @return This builder for chaining.
     */
    public Builder setCacheModeValue(int value) {

      cacheMode_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Specifies the cache setting for all responses from this backend. The possible values are:
     * USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server.
     * FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content.
     * CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
     * </pre>
     *
     * <code>.google.cloud.compute.v1.BackendServiceCdnPolicy.CacheMode cache_mode = 28877888;
     * </code>
     *
     * @return The cacheMode.
     */
    @java.lang.Override
    public com.google.cloud.compute.v1.BackendServiceCdnPolicy.CacheMode getCacheMode() {
      @SuppressWarnings("deprecation")
      com.google.cloud.compute.v1.BackendServiceCdnPolicy.CacheMode result =
          com.google.cloud.compute.v1.BackendServiceCdnPolicy.CacheMode.valueOf(cacheMode_);
      return result == null
          ? com.google.cloud.compute.v1.BackendServiceCdnPolicy.CacheMode.UNRECOGNIZED
          : result;
    }
    /**
     *
     *
     * <pre>
     * Specifies the cache setting for all responses from this backend. The possible values are:
     * USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server.
     * FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content.
     * CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
     * </pre>
     *
     * <code>.google.cloud.compute.v1.BackendServiceCdnPolicy.CacheMode cache_mode = 28877888;
     * </code>
     *
     * @param value The cacheMode to set.
     * @return This builder for chaining.
     */
    public Builder setCacheMode(
        com.google.cloud.compute.v1.BackendServiceCdnPolicy.CacheMode value) {
      if (value == null) {
        throw new NullPointerException();
      }

      cacheMode_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Specifies the cache setting for all responses from this backend. The possible values are:
     * USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server.
     * FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content.
     * CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
     * </pre>
     *
     * <code>.google.cloud.compute.v1.BackendServiceCdnPolicy.CacheMode cache_mode = 28877888;
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearCacheMode() {

      cacheMode_ = 0;
      onChanged();
      return this;
    }

    private int clientTtl_;
    /**
     *
     *
     * <pre>
     * Specifies a separate client (e.g. browser client) TTL, separate from the TTL for Cloud CDN's edge caches. Leaving this empty will use the same cache TTL for both Cloud CDN and the client-facing response. The maximum allowed value is 86400s (1 day).
     * </pre>
     *
     * <code>int32 client_ttl = 29034360;</code>
     *
     * @return The clientTtl.
     */
    @java.lang.Override
    public int getClientTtl() {
      return clientTtl_;
    }
    /**
     *
     *
     * <pre>
     * Specifies a separate client (e.g. browser client) TTL, separate from the TTL for Cloud CDN's edge caches. Leaving this empty will use the same cache TTL for both Cloud CDN and the client-facing response. The maximum allowed value is 86400s (1 day).
     * </pre>
     *
     * <code>int32 client_ttl = 29034360;</code>
     *
     * @param value The clientTtl to set.
     * @return This builder for chaining.
     */
    public Builder setClientTtl(int value) {

      clientTtl_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Specifies a separate client (e.g. browser client) TTL, separate from the TTL for Cloud CDN's edge caches. Leaving this empty will use the same cache TTL for both Cloud CDN and the client-facing response. The maximum allowed value is 86400s (1 day).
     * </pre>
     *
     * <code>int32 client_ttl = 29034360;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearClientTtl() {

      clientTtl_ = 0;
      onChanged();
      return this;
    }

    private int defaultTtl_;
    /**
     *
     *
     * <pre>
     * Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
     * </pre>
     *
     * <code>int32 default_ttl = 100253422;</code>
     *
     * @return The defaultTtl.
     */
    @java.lang.Override
    public int getDefaultTtl() {
      return defaultTtl_;
    }
    /**
     *
     *
     * <pre>
     * Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
     * </pre>
     *
     * <code>int32 default_ttl = 100253422;</code>
     *
     * @param value The defaultTtl to set.
     * @return This builder for chaining.
     */
    public Builder setDefaultTtl(int value) {

      defaultTtl_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
     * </pre>
     *
     * <code>int32 default_ttl = 100253422;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearDefaultTtl() {

      defaultTtl_ = 0;
      onChanged();
      return this;
    }

    private int maxTtl_;
    /**
     *
     *
     * <pre>
     * Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
     * </pre>
     *
     * <code>int32 max_ttl = 39142545;</code>
     *
     * @return The maxTtl.
     */
    @java.lang.Override
    public int getMaxTtl() {
      return maxTtl_;
    }
    /**
     *
     *
     * <pre>
     * Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
     * </pre>
     *
     * <code>int32 max_ttl = 39142545;</code>
     *
     * @param value The maxTtl to set.
     * @return This builder for chaining.
     */
    public Builder setMaxTtl(int value) {

      maxTtl_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
     * </pre>
     *
     * <code>int32 max_ttl = 39142545;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearMaxTtl() {

      maxTtl_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object signedUrlCacheMaxAgeSec_ = "";
    /**
     *
     *
     * <pre>
     * Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
     * </pre>
     *
     * <code>string signed_url_cache_max_age_sec = 939078;</code>
     *
     * @return The signedUrlCacheMaxAgeSec.
     */
    public java.lang.String getSignedUrlCacheMaxAgeSec() {
      java.lang.Object ref = signedUrlCacheMaxAgeSec_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        signedUrlCacheMaxAgeSec_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
     * </pre>
     *
     * <code>string signed_url_cache_max_age_sec = 939078;</code>
     *
     * @return The bytes for signedUrlCacheMaxAgeSec.
     */
    public com.google.protobuf.ByteString getSignedUrlCacheMaxAgeSecBytes() {
      java.lang.Object ref = signedUrlCacheMaxAgeSec_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        signedUrlCacheMaxAgeSec_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
     * </pre>
     *
     * <code>string signed_url_cache_max_age_sec = 939078;</code>
     *
     * @param value The signedUrlCacheMaxAgeSec to set.
     * @return This builder for chaining.
     */
    public Builder setSignedUrlCacheMaxAgeSec(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      signedUrlCacheMaxAgeSec_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
     * </pre>
     *
     * <code>string signed_url_cache_max_age_sec = 939078;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearSignedUrlCacheMaxAgeSec() {

      signedUrlCacheMaxAgeSec_ = getDefaultInstance().getSignedUrlCacheMaxAgeSec();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
     * </pre>
     *
     * <code>string signed_url_cache_max_age_sec = 939078;</code>
     *
     * @param value The bytes for signedUrlCacheMaxAgeSec to set.
     * @return This builder for chaining.
     */
    public Builder setSignedUrlCacheMaxAgeSecBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      signedUrlCacheMaxAgeSec_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList signedUrlKeyNames_ =
        com.google.protobuf.LazyStringArrayList.EMPTY;

    private void ensureSignedUrlKeyNamesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        signedUrlKeyNames_ = new com.google.protobuf.LazyStringArrayList(signedUrlKeyNames_);
        bitField0_ |= 0x00000001;
      }
    }
    /**
     *
     *
     * <pre>
     * [Output Only] Names of the keys for signing request URLs.
     * </pre>
     *
     * <code>repeated string signed_url_key_names = 103413429;</code>
     *
     * @return A list containing the signedUrlKeyNames.
     */
    public com.google.protobuf.ProtocolStringList getSignedUrlKeyNamesList() {
      return signedUrlKeyNames_.getUnmodifiableView();
    }
    /**
     *
     *
     * <pre>
     * [Output Only] Names of the keys for signing request URLs.
     * </pre>
     *
     * <code>repeated string signed_url_key_names = 103413429;</code>
     *
     * @return The count of signedUrlKeyNames.
     */
    public int getSignedUrlKeyNamesCount() {
      return signedUrlKeyNames_.size();
    }
    /**
     *
     *
     * <pre>
     * [Output Only] Names of the keys for signing request URLs.
     * </pre>
     *
     * <code>repeated string signed_url_key_names = 103413429;</code>
     *
     * @param index The index of the element to return.
     * @return The signedUrlKeyNames at the given index.
     */
    public java.lang.String getSignedUrlKeyNames(int index) {
      return signedUrlKeyNames_.get(index);
    }
    /**
     *
     *
     * <pre>
     * [Output Only] Names of the keys for signing request URLs.
     * </pre>
     *
     * <code>repeated string signed_url_key_names = 103413429;</code>
     *
     * @param index The index of the value to return.
     * @return The bytes of the signedUrlKeyNames at the given index.
     */
    public com.google.protobuf.ByteString getSignedUrlKeyNamesBytes(int index) {
      return signedUrlKeyNames_.getByteString(index);
    }
    /**
     *
     *
     * <pre>
     * [Output Only] Names of the keys for signing request URLs.
     * </pre>
     *
     * <code>repeated string signed_url_key_names = 103413429;</code>
     *
     * @param index The index to set the value at.
     * @param value The signedUrlKeyNames to set.
     * @return This builder for chaining.
     */
    public Builder setSignedUrlKeyNames(int index, java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureSignedUrlKeyNamesIsMutable();
      signedUrlKeyNames_.set(index, value);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * [Output Only] Names of the keys for signing request URLs.
     * </pre>
     *
     * <code>repeated string signed_url_key_names = 103413429;</code>
     *
     * @param value The signedUrlKeyNames to add.
     * @return This builder for chaining.
     */
    public Builder addSignedUrlKeyNames(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureSignedUrlKeyNamesIsMutable();
      signedUrlKeyNames_.add(value);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * [Output Only] Names of the keys for signing request URLs.
     * </pre>
     *
     * <code>repeated string signed_url_key_names = 103413429;</code>
     *
     * @param values The signedUrlKeyNames to add.
     * @return This builder for chaining.
     */
    public Builder addAllSignedUrlKeyNames(java.lang.Iterable<java.lang.String> values) {
      ensureSignedUrlKeyNamesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(values, signedUrlKeyNames_);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * [Output Only] Names of the keys for signing request URLs.
     * </pre>
     *
     * <code>repeated string signed_url_key_names = 103413429;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearSignedUrlKeyNames() {
      signedUrlKeyNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * [Output Only] Names of the keys for signing request URLs.
     * </pre>
     *
     * <code>repeated string signed_url_key_names = 103413429;</code>
     *
     * @param value The bytes of the signedUrlKeyNames to add.
     * @return This builder for chaining.
     */
    public Builder addSignedUrlKeyNamesBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      ensureSignedUrlKeyNamesIsMutable();
      signedUrlKeyNames_.add(value);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.compute.v1.BackendServiceCdnPolicy)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.compute.v1.BackendServiceCdnPolicy)
  private static final com.google.cloud.compute.v1.BackendServiceCdnPolicy DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.cloud.compute.v1.BackendServiceCdnPolicy();
  }

  public static com.google.cloud.compute.v1.BackendServiceCdnPolicy getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<BackendServiceCdnPolicy> PARSER =
      new com.google.protobuf.AbstractParser<BackendServiceCdnPolicy>() {
        @java.lang.Override
        public BackendServiceCdnPolicy parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new BackendServiceCdnPolicy(input, extensionRegistry);
        }
      };

  public static com.google.protobuf.Parser<BackendServiceCdnPolicy> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<BackendServiceCdnPolicy> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.compute.v1.BackendServiceCdnPolicy getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
