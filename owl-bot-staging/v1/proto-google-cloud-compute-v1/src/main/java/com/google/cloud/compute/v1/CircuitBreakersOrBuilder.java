// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/compute/v1/compute.proto

package com.google.cloud.compute.v1;

public interface CircuitBreakersOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.cloud.compute.v1.CircuitBreakers)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
   * </pre>
   *
   * <code>optional int32 max_connections = 110652154;</code>
   * @return Whether the maxConnections field is set.
   */
  boolean hasMaxConnections();
  /**
   * <pre>
   * Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
   * </pre>
   *
   * <code>optional int32 max_connections = 110652154;</code>
   * @return The maxConnections.
   */
  int getMaxConnections();

  /**
   * <pre>
   * Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
   * </pre>
   *
   * <code>optional int32 max_pending_requests = 375558887;</code>
   * @return Whether the maxPendingRequests field is set.
   */
  boolean hasMaxPendingRequests();
  /**
   * <pre>
   * Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
   * </pre>
   *
   * <code>optional int32 max_pending_requests = 375558887;</code>
   * @return The maxPendingRequests.
   */
  int getMaxPendingRequests();

  /**
   * <pre>
   * The maximum number of parallel requests that allowed to the backend service. If not specified, there is no limit.
   * </pre>
   *
   * <code>optional int32 max_requests = 28097599;</code>
   * @return Whether the maxRequests field is set.
   */
  boolean hasMaxRequests();
  /**
   * <pre>
   * The maximum number of parallel requests that allowed to the backend service. If not specified, there is no limit.
   * </pre>
   *
   * <code>optional int32 max_requests = 28097599;</code>
   * @return The maxRequests.
   */
  int getMaxRequests();

  /**
   * <pre>
   * Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
   * </pre>
   *
   * <code>optional int32 max_requests_per_connection = 361630528;</code>
   * @return Whether the maxRequestsPerConnection field is set.
   */
  boolean hasMaxRequestsPerConnection();
  /**
   * <pre>
   * Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
   * </pre>
   *
   * <code>optional int32 max_requests_per_connection = 361630528;</code>
   * @return The maxRequestsPerConnection.
   */
  int getMaxRequestsPerConnection();

  /**
   * <pre>
   * Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
   * </pre>
   *
   * <code>optional int32 max_retries = 55546219;</code>
   * @return Whether the maxRetries field is set.
   */
  boolean hasMaxRetries();
  /**
   * <pre>
   * Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
   * </pre>
   *
   * <code>optional int32 max_retries = 55546219;</code>
   * @return The maxRetries.
   */
  int getMaxRetries();
}
